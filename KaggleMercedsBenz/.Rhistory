trainingSet = as.data.frame(trainingSet)
trainingSet = trainingSet[rep(1:nrow(trainingSet),each=20),]
trainingSet = as.h2o(trainingSet)
outcome = "y"
features = setdiff(names(trainingSet), outcome)
classifier = h2o.deeplearning(
model_id="dl_model",
training_frame=trainingSet,
validation_frame=validationSet,
x=features,
y=outcome,
hidden=c(150, 150, 150, 150, 150),
epochs=1000,
input_dropout_ratio = 0.05,
activation = "RectifierWithDropout",
train_samples_per_iteration=-2,
l1=1e-5,  # Regularization
l2=1e-5,  # Regularization
max_w2=10
)
yPred = h2o.predict(classifier,
type="response",
newdata = testSet[-ncol(testSet)])
yPred = as.vector(yPred)
yEmp = as.vector(testSet$y)
mse = mean((yPred - yEmp)^2); mse
R2 = 1 - (sum((yEmp-yPred)^2)/sum((yEmp-mean(yEmp))^2)); R2
# ===== Import datasets ===== #
origData = read.csv("train.csv", sep=",")
testSetMerc = read.csv("test.csv", sep=",")
origData = origData[, c(3:ncol(origData), 2)]
# ===== Remove rows with missing values and id ===== #
origData = origData[complete.cases(origData), 1:ncol(origData)]
testSetMerc = testSetMerc[complete.cases(testSetMerc), 2:ncol(testSetMerc)]
# ===== Split data into training, validation and test===== #
splits = h2o.splitFrame(as.h2o(origData),
c(0.6,0.2),
seed=1234)
trainingSet = h2o.assign(splits[[1]], "train.hex")
validationSet = h2o.assign(splits[[2]], "valid.hex")
testSet = h2o.assign(splits[[3]], "test.hex")
# ===== Get outcome and features names ===== #
outcome = "y"
features = setdiff(names(trainingSet), outcome)
# ===== Create a classifier ===== #
classifier = h2o.deeplearning(
model_id="dl_model",
training_frame=trainingSet,
validation_frame=validationSet,
x=features,
y=outcome,
hidden=c(150, 150, 150, 150, 150),
epochs=1000,
input_dropout_ratio = 0.05,
activation = "RectifierWithDropout",
train_samples_per_iteration=-2,
l1=1e-5,  # Regularization
l2=1e-5,  # Regularization
max_w2=10
)
yPred = h2o.predict(classifier,
type="response",
newdata = testSet[-ncol(testSet)])
yPred = as.vector(yPred)
yEmp = as.vector(testSet$y)
mse = mean((yPred - yEmp)^2); mse
R2 = 1 - (sum((yEmp-yPred)^2)/sum((yEmp-mean(yEmp))^2)); R2
origtestSetMerc = read.csv("test.csv", sep=",")
origtestSetMerc = origtestSetMerc[complete.cases(origtestSetMerc), 2:ncol(origtestSetMerc)]
testSetMerc = as.h2o(origtestSetMerc)
yMerc = h2o.predict(classifier,
type="response",
newdata = testSet[-ncol(testSetMerc)])
View(origtestSetMerc)
yMerc = as.vector(yMerc)
summary(classifier)
hyper_params <- list(
activation=c("Rectifier","Tanh","Maxout","RectifierWithDropout","TanhWithDropout","MaxoutWithDropout"),
hidden=list(c(20,20),c(50,50),c(100,100),c(150,150)),
input_dropout_ratio=c(0,0.05),
l1=seq(0,1e-4,1e-6),
l2=seq(0,1e-4,1e-6)
)
hyper_params
searchCriteria = list(strategy = "RandomDiscrete", max_runtime_secs = 10000, max_models = 500, seed=1234567, stopping_rounds=100, stopping_tolerance=1e-2)
dlRandomGrid <- h2o.grid(
algorithm="deeplearning",
grid_id = "dlRandomGrid",
training_frame=trainingSet,
validation_frame=validationSet,
x=features,
y=outcome,
epochs=100,
stopping_metric="logloss",
max_w2=10,
hyper_params = hyper_params,
search_criteria = searchCriteria
)
dlRandomGrid <- h2o.grid(
algorithm="deeplearning",
grid_id = "dlRandomGrid",
training_frame=trainingSet,
validation_frame=validationSet,
x=features,
y=outcome,
epochs=100,
stopping_metric="AUTO",
max_w2=10,
hyper_params = hyper_params,
search_criteria = searchCriteria
)
grid <- h2o.getGrid("dlRandomGrid",sort_by="mse",decreasing=FALSE)
grid
grid@summary_table[1,]
best_model <- h2o.getModel(grid@model_ids[[1]])
best_model
?h2o
?h20.predict
yMercGS = h2o.predict(best_model,
type="response",
newdata = testSet[-ncol(testSetMerc)])
yMercGS = as.vector(yMercGS)
View(origtestSetMerc)
View(origtestSetMerc)
origtestSetMerc = read.csv("test.csv", sep=",")
View(origtestSetMerc)
finalMercData = origtestSetMerc
finalMercData["y"] <- yMercGS
yMercGS = h2o.predict(best_model,
type="response",
newdata = testSetMerc[-ncol(testSetMerc)])
yMercGS = as.vector(yMercGS)
finalMercData = origtestSetMerc
finalMercData["y"] <- yMercGS
subMCData = subset(finalMercData, select = c("ID", "y"))
View(subMCData)
write.csv(subMCData, file = "subGridANN.csv")
library(h2o)
library(caTools)
library(splitstackshape)
origData = read.csv("train.csv", sep=",")
origtestSetMerc = read.csv("test.csv", sep=",")
testData = origData[, c(3:ncol(origData), 2)]
testData = testData[complete.cases(testData), 1:ncol(testData)]
newtestSetMerc = origtestSetMerc[complete.cases(origtestSetMerc), 2:ncol(origtestSetMerc)]
# ===== Import datasets ===== #
origData = read.csv("train.csv", sep=",")
origtestSetMerc = read.csv("test.csv", sep=",")
testData = origData[, c(3:ncol(origData), 2)]
# ===== Remove rows with missing values and id ===== #
testData = testData[complete.cases(testData), 1:ncol(testData)]
newtestSetMerc = origtestSetMerc[complete.cases(origtestSetMerc), 2:ncol(origtestSetMerc)]
# ===== Init connection ===== #
h2o.init(nthreads = -1)
splits = h2o.splitFrame(as.h2o(origData),
c(0.6,0.2),
seed=1234)
trainingSet = h2o.assign(splits[[1]], "train.hex")
validationSet = h2o.assign(splits[[2]], "valid.hex")
testSet = h2o.assign(splits[[3]], "test.hex")
outcome = "y"
features = setdiff(names(trainingSet), outcome)
install.packages("https://h2o-release.s3.amazonaws.com/h2o-ensemble/R/h2oEnsemble_0.1.8.tar.gz", repos = NULL)
library(h2oEnsemble)
?h2oEnsemble
splits = h2o.splitFrame(as.h2o(testData),
c(0.6,0.2),
seed=1234)
trainingSet = h2o.assign(splits[[1]], "train.hex")
validationSet = h2o.assign(splits[[2]], "valid.hex")
testSet = h2o.assign(splits[[3]], "test.hex")
outcome = "y"
features = setdiff(names(trainingSet), outcome)
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper",
"h2o.gbm.wrapper", "h2o.deeplearning.wrapper")
metalearner <- "h2o.glm.wrapper"
family = "gaussian"
ensClassifier <- h2o.ensemble(x = features, y = outcome,
training_frame = trainingSet,
model_id = "ensClassModel",
validation_frame = validationSet,
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
trainSetEL = as.h2o(testData)
trainSetEL = as.h2o(testData)
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcome)
trainSetEL = as.h2o(testData)
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
?`h2o
?h2o
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("statmod","RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-vajda/3/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
install.packages("h2o", type = "source", repos = "http://h2o-release.s3.amazonaws.com/h2o/rel-vajda/3/R")
?h2o
library(h2o)
?`h2o-package`
splits = h2o.splitFrame(as.h2o(testData),
c(0.6,0.2),
seed=1234)
h2o.init(nthreads = -1)
splits = h2o.splitFrame(as.h2o(testData),
c(0.6,0.2),
seed=1234)
trainSetEL = h2o.assign(splits[[1]], "train.hex")
testSetEL = h2o.assign(splits[[1]], "test.hex")
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
library(h2oEnsemble)
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper",
"h2o.gbm.wrapper")
metalearner <- "h2o.glm.wrapper"
family = "gaussian"
splits = h2o.splitFrame(as.h2o(testData),
c(0.6,0.2),
seed=1234)
trainSetEL = h2o.assign(splits[[1]], "train.hex")
testSetEL = h2o.assign(splits[[1]], "test.hex")
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
splits = h2o.splitFrame(as.h2o(testData),
c(0.6,0.2),
seed=1234)
trainSetEL = h2o.assign(splits[[1]], "train.hex")
testSetEL = h2o.assign(splits[[2]], "test.hex")
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
ensPred <- h2o.ensemble_performance(ensClassifier, newdata = testSetEL)
print(ensPred, metric = "MSE")
ensTestSetMerc = as.h2o(newtestSetMerc)
predMerc <- predcit(ensClassifier, newdata = ensTestSetMerc)
predMerc <- predict(ensClassifier, newdata = ensTestSetMerc)
warnings()
predMercEL <- predict(ensClassifier, newdata = ensTestSetMerc)
yMercEL <- as.vector(predMercEL)
predMercEL = predict(ensClassifier, newdata = ensTestSetMerc)
yMercEL = as.vector(predMercEL)
finalMercDataEL = origtestSetMerc
finalMercDataEL["y"] <- yMercEL
subMCDataEL = subset(finalMercDataEL, select = c("ID", "y"))
View(subMCDataEL)
ensTestSetMerc = as.h2o(newtestSetMerc)
predMercEL = predict(ensClassifier, newdata = ensTestSetMerc)
yMercEL = as.vector(predMercEL)
finalMercDataEL = origtestSetMerc
View(newtestSetMerc)
origtestSetMerc = read.csv("test.csv", sep=",")
View(origtestSetMerc)
finalMercDataEL = origtestSetMerc
finalMercDataEL["y"] <- yMercEL
yMercEL
finalMercDataEL["y"] <- yMercEL$pred
subMCDataEL = subset(finalMercDataEL, select = c("ID", "y"))
View(subMCDataEL)
View(subMCDataEL)
View(finalMercDataEL)
subMCDataEL <- subset(finalMercDataEL, select = c("ID", "y"))
View(subMCDataEL)
finalMercDataEL <- origtestSetMerc
finalMercDataEL["y"] <- yMercEL$pred
subMCDataEL <- subset(finalMercDataEL, select = c("ID", "y"))
View(subMCDataEL)
ensTestSetMerc
predMercEL = h2o.predict(ensClassifier,
type="response",
newdata = ensTestSetMerc[-ncol(ensTestSetMerc)])
predMercEL = h2o.predict(ensClassifier,
type="response",
newdata = ensTestSetMerc)
predMercEL = h2o.predict(ensClassifier,
newdata = ensTestSetMerc)
predMercEL = predict(ensClassifier, newdata = ensTestSetMerc)
predMercEL
yMercEL = as.vector(predMercEL$pred)
finalMercDataEL <- origtestSetMerc
finalMercDataEL["y"] <- yMercEL$pred
finalMercDataEL["y"] <- yMercEL
subMCDataEL <- subset(finalMercDataEL, select = c("ID", "y"))
View(subMCDataEL)
write.csv(subMCDataEL, file = "ELSubmission.csv", row.names = NA)
write.csv(subMCDataEL, file = "ELSubmission.csv", row.names = FLASE)
write.csv(subMCDataEL, file = "ELSubmission.csv", row.names = FALSE)
print(ensPred, metric = "MSE")
h2o.shutdown(prompt=FALSE)
origData = read.csv("train.csv", sep=",")
origtestSetMerc = read.csv("test.csv", sep=",")
testData = origData[, c(3:ncol(origData), 2)]
testData = testData[complete.cases(testData), 1:ncol(testData)]
newtestSetMerc = origtestSetMerc[complete.cases(origtestSetMerc), 2:ncol(origtestSetMerc)]
h2o.init(nthreads = -1)
splits = h2o.splitFrame(as.h2o(testData),
c(0.75,0.2),
seed=1234)
trainSetEL = h2o.assign(splits[[1]], "train.hex")
testSetEL = h2o.assign(splits[[2]], "test.hex")
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
h2o.glm.1 <- function(..., alpha = 0.0) h2o.glm.wrapper(..., alpha = alpha)
h2o.glm.2 <- function(..., alpha = 0.5) h2o.glm.wrapper(..., alpha = alpha)
h2o.glm.3 <- function(..., alpha = 1.0) h2o.glm.wrapper(..., alpha = alpha)
h2o.randomForest.1 <- function(..., ntrees = 100, nbins = 50, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, nbins = nbins, seed = seed)
h2o.randomForest.2 <- function(..., ntrees = 100, sample_rate = 0.75, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, sample_rate = sample_rate, seed = seed)
h2o.randomForest.3 <- function(..., ntrees = 100, sample_rate = 0.85, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, sample_rate = sample_rate, seed = seed)
h2o.randomForest.4 <- function(..., ntrees = 100, nbins = 50, balance_classes = TRUE, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, nbins = nbins, balance_classes = balance_classes, seed = seed)
h2o.gbm.1 <- function(..., ntrees = 100, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, seed = seed)
h2o.gbm.2 <- function(..., ntrees = 100, nbins = 50, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, nbins = nbins, seed = seed)
h2o.gbm.3 <- function(..., ntrees = 100, max_depth = 10, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, max_depth = max_depth, seed = seed)
h2o.gbm.4 <- function(..., ntrees = 100, col_sample_rate = 0.8, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.5 <- function(..., ntrees = 100, col_sample_rate = 0.7, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.6 <- function(..., ntrees = 100, col_sample_rate = 0.6, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.7 <- function(..., ntrees = 100, balance_classes = TRUE, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, balance_classes = balance_classes, seed = seed)
h2o.gbm.8 <- function(..., ntrees = 100, max_depth = 3, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, max_depth = max_depth, seed = seed)
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper", "h2o.gbm.wrapper", "h2o.glm.1", "h2o.glm.2", "h2o.glm.3",
"h2o.randomForest.1", "h2o.randomForest.2",
"h2o.gbm.1", "h2o.gbm.2")
metalearner <- "h2o.gbm.wrapper"
family = "gaussian"
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 6))
library(h2oEnsemble)
library(h2o)
library(caTools)
library(splitstackshape)
library(h2oEnsemble)
# Import datasets
origData = read.csv("train.csv", sep=",")
origtestSetMerc = read.csv("test.csv", sep=",")
testData = origData[, c(3:ncol(origData), 2)]
# Remove rows with missing values and id
testData = testData[complete.cases(testData), 1:ncol(testData)]
newtestSetMerc = origtestSetMerc[complete.cases(origtestSetMerc), 2:ncol(origtestSetMerc)]
# ===== Init connection ===== #
h2o.init(nthreads = -1)
# Split training data
splits = h2o.splitFrame(as.h2o(testData),
c(0.75,0.2),
seed=1234)
trainSetEL = h2o.assign(splits[[1]], "train.hex")
testSetEL = h2o.assign(splits[[2]], "test.hex")
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
# ===== ENSEMBLE LEARNING APPROACH===== #
# specifiy base learner models
h2o.glm.1 <- function(..., alpha = 0.0) h2o.glm.wrapper(..., alpha = alpha)
h2o.glm.2 <- function(..., alpha = 0.5) h2o.glm.wrapper(..., alpha = alpha)
h2o.glm.3 <- function(..., alpha = 1.0) h2o.glm.wrapper(..., alpha = alpha)
h2o.randomForest.1 <- function(..., ntrees = 100, nbins = 50, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, nbins = nbins, seed = seed)
h2o.randomForest.2 <- function(..., ntrees = 100, sample_rate = 0.75, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, sample_rate = sample_rate, seed = seed)
h2o.randomForest.3 <- function(..., ntrees = 100, sample_rate = 0.85, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, sample_rate = sample_rate, seed = seed)
h2o.randomForest.4 <- function(..., ntrees = 100, nbins = 50, balance_classes = TRUE, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, nbins = nbins, balance_classes = balance_classes, seed = seed)
h2o.gbm.1 <- function(..., ntrees = 100, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, seed = seed)
h2o.gbm.2 <- function(..., ntrees = 100, nbins = 50, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, nbins = nbins, seed = seed)
h2o.gbm.3 <- function(..., ntrees = 100, max_depth = 10, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, max_depth = max_depth, seed = seed)
h2o.gbm.4 <- function(..., ntrees = 100, col_sample_rate = 0.8, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.5 <- function(..., ntrees = 100, col_sample_rate = 0.7, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.6 <- function(..., ntrees = 100, col_sample_rate = 0.6, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.7 <- function(..., ntrees = 100, balance_classes = TRUE, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, balance_classes = balance_classes, seed = seed)
h2o.gbm.8 <- function(..., ntrees = 100, max_depth = 3, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, max_depth = max_depth, seed = seed)
# Add base learners to learner object
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper", "h2o.gbm.wrapper", "h2o.glm.1", "h2o.glm.2", "h2o.glm.3",
"h2o.randomForest.1", "h2o.randomForest.2",
"h2o.gbm.1", "h2o.gbm.2")
metalearner <- "h2o.gbm.wrapper"
family = "gaussian"
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 6))
h2o.shutdown(prompt=FALSE)
h2o.init()
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper", "h2o.gbm.wrapper", "h2o.glm.1", "h2o.glm.2", "h2o.glm.3",
"h2o.randomForest.1", "h2o.randomForest.2",
"h2o.gbm.1", "h2o.gbm.2")
metalearner <- "h2o.gbm.wrapper"
family = "gaussian"
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 6))
library(h2o)
library(caTools)
library(splitstackshape)
library(h2oEnsemble)
origData = read.csv("train.csv", sep=",")
origtestSetMerc = read.csv("test.csv", sep=",")
testData = origData[, c(3:ncol(origData), 2)]
testData = testData[complete.cases(testData), 1:ncol(testData)]
newtestSetMerc = origtestSetMerc[complete.cases(origtestSetMerc), 2:ncol(origtestSetMerc)]
h2o.init()
splits = h2o.splitFrame(as.h2o(testData),
c(0.75,0.2),
seed=1234)
trainSetEL = h2o.assign(splits[[1]], "train.hex")
testSetEL = h2o.assign(splits[[2]], "test.hex")
outcomeEL = "y"
featuresEL = setdiff(names(trainSetEL), outcomeEL)
h2o.glm.1 <- function(..., alpha = 0.0) h2o.glm.wrapper(..., alpha = alpha)
h2o.glm.2 <- function(..., alpha = 0.5) h2o.glm.wrapper(..., alpha = alpha)
h2o.glm.3 <- function(..., alpha = 1.0) h2o.glm.wrapper(..., alpha = alpha)
h2o.randomForest.1 <- function(..., ntrees = 100, nbins = 50, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, nbins = nbins, seed = seed)
h2o.randomForest.2 <- function(..., ntrees = 100, sample_rate = 0.75, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, sample_rate = sample_rate, seed = seed)
h2o.randomForest.3 <- function(..., ntrees = 100, sample_rate = 0.85, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, sample_rate = sample_rate, seed = seed)
h2o.randomForest.4 <- function(..., ntrees = 100, nbins = 50, balance_classes = TRUE, seed = 1) h2o.randomForest.wrapper(..., ntrees = ntrees, nbins = nbins, balance_classes = balance_classes, seed = seed)
h2o.gbm.1 <- function(..., ntrees = 100, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, seed = seed)
h2o.gbm.2 <- function(..., ntrees = 100, nbins = 50, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, nbins = nbins, seed = seed)
h2o.gbm.3 <- function(..., ntrees = 100, max_depth = 10, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, max_depth = max_depth, seed = seed)
h2o.gbm.4 <- function(..., ntrees = 100, col_sample_rate = 0.8, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.5 <- function(..., ntrees = 100, col_sample_rate = 0.7, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.6 <- function(..., ntrees = 100, col_sample_rate = 0.6, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, col_sample_rate = col_sample_rate, seed = seed)
h2o.gbm.7 <- function(..., ntrees = 100, balance_classes = TRUE, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, balance_classes = balance_classes, seed = seed)
h2o.gbm.8 <- function(..., ntrees = 100, max_depth = 3, seed = 1) h2o.gbm.wrapper(..., ntrees = ntrees, max_depth = max_depth, seed = seed)
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper", "h2o.gbm.wrapper", "h2o.glm.1", "h2o.glm.2", "h2o.glm.3",
"h2o.randomForest.1", "h2o.randomForest.2",
"h2o.gbm.1", "h2o.gbm.2")
metalearner <- "h2o.gbm.wrapper"
family = "gaussian"
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 6))
ensPred <- h2o.ensemble_performance(ensClassifier, newdata = testSetEL)
print(ensPred, metric = "MSE")
ensTestSetMerc = as.h2o(newtestSetMerc)
predMercEL = predict(ensClassifier, newdata = ensTestSetMerc)
yMercEL = as.vector(predMercEL$pred)
finalMercDataEL <- origtestSetMerc
finalMercDataEL["y"] <- yMercEL
subMCDataEL <- subset(finalMercDataEL, select = c("ID", "y"))
write.csv(subMCDataEL, file = "ELSubmission.csv", row.names = FALSE)
learner <- c("h2o.gbm.wrapper", "h2o.gbm.1", "h2o.gbm.2", "h2o.gbm.3", "h2o.gbm.4", "h2o.gbm.5", "h2o.gbm.6", "h2o.gbm.7", "h2o.gbm.8")
metalearner <- "h2o.gbm.wrapper"
family = "gaussian"
ensClassifier <- h2o.ensemble(x = featuresEL, y = outcomeEL,
training_frame = trainSetEL,
model_id = "ensClassModel",
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 6))
ensPred <- h2o.ensemble_performance(ensClassifier, newdata = testSetEL)
print(ensPred, metric = "MSE")
ensTestSetMerc = as.h2o(newtestSetMerc)
predMercEL = predict(ensClassifier, newdata = ensTestSetMerc)
yMercEL = as.vector(predMercEL$pred)
finalMercDataEL <- origtestSetMerc
finalMercDataEL["y"] <- yMercEL
subMCDataEL <- subset(finalMercDataEL, select = c("ID", "y"))
write.csv(subMCDataEL, file = "ELSubmission.csv", row.names = FALSE)
h2o.shutdown()
